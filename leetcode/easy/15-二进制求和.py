# -*- coding:utf-8 -*-
"""
__author__ = "TomTao"

给定两个二进制字符串，返回他们的和（用二进制表示）。

输入为非空字符串且只包含数字 1 和 0。

示例 1:

输入: a = "11", b = "1"
输出: "100"
示例 2:

输入: a = "1010", b = "1011"
输出: "10101"
"""
# 不能直接用方法转换了吧,那样还有啥意思,这应该是考察二进制计算和转换吧.
# 我的思路是一位一位计算,和转换成10进制计算,
# 看了题解,发现可以用内置方法,但是缺陷是容易溢出,无法转换,

class Solution:
    def addBinary(self, a: str, b: str) -> str:
        # 先试着用暴力法,一位一位计算,或者说是转换成10进制再算也可以
        # 先用竖式的法子
        # 首先a,b 非空
        if not all([a,b]):
            return a or b
        # 将a,b变成一样长,短的前面用0补齐.
        # 然后再进行计算





if __name__ == '__main__':
    s = Solution()
    x = s.addBinary("11","1")